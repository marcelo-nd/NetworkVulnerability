# coding=utf-8
"""
Network Vulnerability
"""
import networkx as nx

myNetwork = open("2_HidroFamNet.txt")

G = nx.read_edgelist(myNetwork, delimiter="\t", nodetype=str) # If necessary, change the delimiter

myNetwork.close()

#G = nx.complete_graph(11)

def calculateEfficiency(G):
    '''
    Funci√≥n para calcular la eficiencia de una red de acuerdo a Perrevanen 20..
    '''

    N = len(nx.nodes(G))
    E1 = 1.0/(N*(N-1.0))
    pathsDict = nx.all_pairs_shortest_path_length(G)
    distancias = []
    for i in pathsDict:
        for r in pathsDict[i]:
            if pathsDict[i][r] !=0:
                distancias.append(1/pathsDict[i][r])
    E2 = sum(distancias)
    efficiency = E1 * E2
    return efficiency


initialEfficiency = calculateEfficiency(G)
vulnerability_values=[]

for n in nx.nodes(G):
    G2= G.copy()
    G2.remove_node(n)
    currentVulnerability = (initialEfficiency - calculateEfficiency(G2))/initialEfficiency
    vulnerability_values.append(currentVulnerability)

print sum(vulnerability_values)/len(vulnerability_values)